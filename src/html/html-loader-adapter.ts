import sourcesPlugin from 'html-loader/dist/plugins/sources-plugin';
import path from 'path';

export {
    getExportCode,
    getModuleCode,
    srcType,
    srcsetType,
} from 'html-loader/dist/utils';

export function processHtml(
    html: string,
    sources: SourcesHandlersMap,
    context: string,
    imports: Import[],
    errors: unknown[],
    replacements: Replacement[],
) {
    const process = sourcesPlugin({
        sources: {
            list: sources,
        },
        context,
        imports,
        errors,
        replacements,
    });

    return process(html);
}

const GET_SOURCE_FROM_IMPORT_NAME = '___HTML_LOADER_GET_SOURCE_FROM_IMPORT___';

export function getImportCode(html: string, context: string, imports: Import[]) {
    if (imports.length === 0) {
        return '';
    }

    const fileURLToHelper = contextify(
        context,
        require.resolve('./runtime/getUrl.js'),
    );

    let code = `import ${GET_SOURCE_FROM_IMPORT_NAME} from "${fileURLToHelper}";\n`;

    for (const item of imports) {
        const { format, importName, request } = item;

        switch (format) {
            case 'import':
                code += `import ${importName} from ${JSON.stringify(request)};\n`;
                break;
            case 'url':
            default:
                code += `var ${importName} = new URL(${JSON.stringify(request)}, import.meta.url);\n`;
        }
    }

    return `// Imports\n${code}`;
}

function contextify(context: string, request: string) {
    return request
        .split('!')
        .map(r => absoluteToRequest(context, r))
        .join('!');
}

const WINDOWS_ABS_PATH_REGEXP = /^[a-zA-Z]:[\\/]|^\\\\/;
const WINDOWS_PATH_SEPARATOR_REGEXP = /\\/g;
const RELATIVE_PATH_REGEXP = /^\.\.?[/\\]/;

function absoluteToRequest(context: string, maybeAbsolutePath: string) {
    if (maybeAbsolutePath[0] === '/') {
        if (
            maybeAbsolutePath.length > 1
            && maybeAbsolutePath[maybeAbsolutePath.length - 1] === '/'
        ) {
            // this 'path' is actually a regexp generated by dynamic requires.
            // Don't treat it as an absolute path.
            return maybeAbsolutePath;
        }

        const querySplitPos = maybeAbsolutePath.indexOf('?');

        let resource = querySplitPos === -1
            ? maybeAbsolutePath
            : maybeAbsolutePath.slice(0, querySplitPos);
        resource = path.posix.relative(context, resource);

        if (!resource.startsWith('../')) {
            resource = `./${resource}`;
        }

        return querySplitPos === -1
            ? resource
            : resource + maybeAbsolutePath.slice(querySplitPos);
    }

    if (WINDOWS_ABS_PATH_REGEXP.test(maybeAbsolutePath)) {
        const querySplitPos = maybeAbsolutePath.indexOf('?');
        let resource = querySplitPos === -1
            ? maybeAbsolutePath
            : maybeAbsolutePath.slice(0, querySplitPos);

        resource = path.win32.relative(context, resource);

        if (!WINDOWS_ABS_PATH_REGEXP.test(resource)) {
            resource = resource.replace(WINDOWS_PATH_SEPARATOR_REGEXP, '/');

            if (!resource.startsWith('../')) {
                resource = `./${resource}`;
            }
        }

        return querySplitPos === -1
            ? resource
            : resource + maybeAbsolutePath.slice(querySplitPos);
    }

    if (!RELATIVE_PATH_REGEXP.test(maybeAbsolutePath)) {
        return `./${maybeAbsolutePath.replace(WINDOWS_PATH_SEPARATOR_REGEXP, '/')}`;
    }

    // not an absolute path
    return maybeAbsolutePath;
}
